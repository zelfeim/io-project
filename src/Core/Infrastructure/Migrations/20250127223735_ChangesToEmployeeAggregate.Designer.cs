// <auto-generated />
using System;
using Application.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Application.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250127223735_ChangesToEmployeeAggregate")]
    partial class ChangesToEmployeeAggregate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Domain.Aggregates.AnimalAggregate.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("AnimalOwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalOwnerId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.AnimalOwnerAggregate.AnimalOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AnimalOwners");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.EmployeeAggregate.WorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("ShiftEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("ShiftStart")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkSchedule");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.ResourcesAggregate.Resources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("ShelfLive")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.VisitAggregate.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestedTreatment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("VisitInformation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("VisitLength")
                        .HasColumnType("bigint");

                    b.Property<string>("VisitStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.AnimalAggregate.Animal", b =>
                {
                    b.HasOne("Application.Domain.Aggregates.AnimalOwnerAggregate.AnimalOwner", "AnimalOwner")
                        .WithMany("Animals")
                        .HasForeignKey("AnimalOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimalOwner");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.AnimalOwnerAggregate.AnimalOwner", b =>
                {
                    b.OwnsOne("Application.Domain.Aggregates.AnimalOwnerAggregate.EmailAddress", "Email", b1 =>
                        {
                            b1.Property<int>("AnimalOwnerId")
                                .HasColumnType("integer");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AnimalOwnerId");

                            b1.ToTable("AnimalOwners");

                            b1.WithOwner()
                                .HasForeignKey("AnimalOwnerId");
                        });

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.OwnsOne("Application.Domain.Aggregates.AnimalOwnerAggregate.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("integer");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("EmailAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Domain.Aggregates.EmployeeAggregate.WorkSchedule", b =>
                {
                    b.HasOne("Application.Domain.Aggregates.EmployeeAggregate.Employee", null)
                        .WithMany("WorkSchedule")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Domain.Aggregates.VisitAggregate.Visit", b =>
                {
                    b.HasOne("Application.Domain.Aggregates.AnimalAggregate.Animal", "Animal")
                        .WithMany("Visits")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Domain.Aggregates.EmployeeAggregate.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Application.Domain.Aggregates.VisitAggregate.Prescription", "Prescription", b1 =>
                        {
                            b1.Property<int>("VisitId")
                                .HasColumnType("integer");

                            b1.Property<string>("PrescribedMeds")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("VisitId");

                            b1.ToTable("Visits");

                            b1.WithOwner()
                                .HasForeignKey("VisitId");
                        });

                    b.Navigation("Animal");

                    b.Navigation("Employee");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.AnimalAggregate.Animal", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.AnimalOwnerAggregate.AnimalOwner", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Application.Domain.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.Navigation("WorkSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
